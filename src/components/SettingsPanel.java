/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package components;

import controller.PanelController;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import utils.PanelNames;

/**
 *
 * @author Gazi
 */
public class SettingsPanel extends javax.swing.JPanel {

    private static final String DB_FILE = "dbconfig.properties";
    private static final String DB_URL_KEY = "url";
    private static final String DB_USERNAME_KEY = "username";
    private static final String DB_PASSWORD_KEY = "password";
    private static final String DEFAULT_URL_KEY = "jdbc:mysql://localhost:3306/quiz_tournaments";
    private static final String DEFAULT_USERNAME_KEY = "root";
    private static final String DEFAULT_PASSWORD_KEY = "";

    /**
     * Creates new form SettingsPanel
     */
    public SettingsPanel() {
        initComponents();
        loadProperties();
        preparePanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        configurationTitleLbl = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        databaseNameField = new components.TextInputField();
        usernameField = new components.TextInputField();
        saveBtn = new javax.swing.JButton();
        restoreDefaultBtn = new javax.swing.JButton();
        passwordField = new components.PasswordInputField();

        setMaximumSize(new java.awt.Dimension(600, 350));
        setMinimumSize(new java.awt.Dimension(600, 350));
        setPreferredSize(new java.awt.Dimension(600, 350));

        configurationTitleLbl.setText("Database configuration");

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        restoreDefaultBtn.setText("Restore default");
        restoreDefaultBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreDefaultBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(configurationTitleLbl)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(backBtn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(restoreDefaultBtn, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(saveBtn)))
                                .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(databaseNameField, javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(usernameField, javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(passwordField, javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(configurationTitleLbl)
                                .addGap(21, 21, 21)
                                .addComponent(databaseNameField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(backBtn)
                                        .addComponent(saveBtn)
                                        .addComponent(restoreDefaultBtn))
                                .addContainerGap(56, Short.MAX_VALUE)));
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_backBtnActionPerformed
        PanelController.getInstance().updatePanel(PanelNames.START_SERVER_PANEL);
    }// GEN-LAST:event_backBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveBtnActionPerformed
        try {
            String url = databaseNameField.getValue();
            String username = usernameField.getValue();
            String password = passwordField.getValue();
            saveProperties(url, username, password);
            JOptionPane.showMessageDialog(this, "Connection successfully updated!");
            PanelController.getInstance().updatePanel(PanelNames.START_SERVER_PANEL);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "You must fill all fields!");
            Logger.getLogger(SettingsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }// GEN-LAST:event_saveBtnActionPerformed

    private void restoreDefaultBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_restoreDefaultBtnActionPerformed
        saveProperties(DEFAULT_URL_KEY, DEFAULT_USERNAME_KEY, DEFAULT_PASSWORD_KEY);
        JOptionPane.showMessageDialog(this, "Connection configuration reset to default!");
        PanelController.getInstance().updatePanel(PanelNames.START_SERVER_PANEL);
    }// GEN-LAST:event_restoreDefaultBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel configurationTitleLbl;
    private components.TextInputField databaseNameField;
    private components.PasswordInputField passwordField;
    private javax.swing.JButton restoreDefaultBtn;
    private javax.swing.JButton saveBtn;
    private components.TextInputField usernameField;
    // End of variables declaration//GEN-END:variables

    private void preparePanel() {
        databaseNameField.setText("Database name: ");
        usernameField.setText("Username: ");
        passwordField.setText("Password: ");
    }

    private void saveProperties(String url, String username, String password) {

        Properties properties = new Properties();

        try ( FileInputStream in = new FileInputStream(DB_FILE)) {
            properties.load(in);
        } catch (IOException e) {
            System.out.println("DB properties file not found, creating new one.");
        }

        properties.setProperty(DB_URL_KEY, url);
        properties.setProperty(DB_USERNAME_KEY, username);
        properties.setProperty(DB_PASSWORD_KEY, password);

        databaseNameField.setValue(url);
        usernameField.setValue(username);
        passwordField.setValue(password);

        try ( FileOutputStream out = new FileOutputStream(DB_FILE)) {
            properties.store(out, "DB Properties");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public Properties loadProperties() {
        Properties properties = new Properties();

        try ( FileInputStream in = new FileInputStream(DB_FILE)) {
            properties.load(in);
        } catch (IOException e) {
            e.printStackTrace();
        }

        String url = properties.getProperty(DB_URL_KEY);
        String username = properties.getProperty(DB_USERNAME_KEY);
        String password = properties.getProperty(DB_PASSWORD_KEY);

        databaseNameField.setValue(url);
        usernameField.setValue(username);
        passwordField.setValue(password);

        return properties;
    }
}
